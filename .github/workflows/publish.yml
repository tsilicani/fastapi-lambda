name: Publish to PyPI

on:
    push:
        branches:
            - release
    workflow_dispatch: # Allows manual trigger

jobs:
    test:
        name: Run Tests
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.10"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install poetry
                  poetry install

            - name: Run tests
              run: |
                  poetry run pytest tests -v -k 'not e2e'

            - name: Check coverage
              run: |
                  poetry run pytest tests/ --cov=fastapifn --cov-report=term-missing -k 'not e2e'

    publish:
        name: Build and Publish to PyPI
        needs: test
        runs-on: ubuntu-latest
        permissions:
            contents: write  # Needed for creating releases
        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.10"

            - name: Install build dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install build twine tomli

            - name: Build package
              run: python -m build

            - name: Check package
              run: twine check dist/*

            - name: Publish to PyPI
              env:
                  TWINE_USERNAME: __token__
                  TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
              run: twine upload dist/*

            - name: Extract version from pyproject.toml
              id: get_version
              run: |
                  VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
                  echo "version=$VERSION" >> $GITHUB_OUTPUT

            - name: Create GitHub Release
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: v${{ steps.get_version.outputs.version }}
                  name: Release v${{ steps.get_version.outputs.version }}
                  draft: false
                  prerelease: true
                  generate_release_notes: true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
