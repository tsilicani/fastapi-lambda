name: Publish to PyPI

on:
  push:
    branches:
      - release
  workflow_dispatch: # Allows manual trigger

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Run tests
        run: |
          poetry run pytest tests -v -k 'not e2e'

      - name: Check coverage
        run: |
          poetry run pytest tests/ --cov=fastapi_lambda --cov-report=term-missing -k 'not e2e'

  bump-version:
    name: Auto-increment Version
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run version bump script
        run: |
          bash .github/scripts/bump-version.sh

  publish:
    name: Build and Publish to PyPI
    needs: bump-version
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for creating releases
    steps:
      - uses: actions/checkout@v4
        with:
          ref: release
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine tomli

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*

      - name: Extract version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: true
          generate_release_notes: true
          body: |
            ## What's Changed
            Auto-generated release for version ${{ steps.get_version.outputs.version }}

            See full changelog at https://github.com/${{ github.repository }}/compare/v${{ steps.get_version.outputs.version }}...HEAD
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
